{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Gj0VHxFgYEOf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# --- IMPORTANT: File Path for Your CSV ---\n",
        "# You need to ensure the 'afa2e701598d20110228.csv' file is accessible.\n",
        "#\n",
        "# OPTION 1 (Recommended): Place the 'afa2e701598d20110228.csv' file\n",
        "# in the SAME DIRECTORY as this Python script.\n",
        "# In this case, the line below will work as is:\n",
        "#file_path = 'afa2e701598d20110228.csv'\n",
        "\n",
        "# OPTION 2: If the file is in your device's \"Download\" folder or elsewhere,\n",
        "# you need to provide the FULL, ABSOLUTE PATH to it.\n",
        "# For Android (like Pydroid3), this path might look like:\n",
        "# file_path = '/sdcard/Download/afa2e7011598d20110228.csv'\n",
        "# o\n",
        "file_path = '/content/afa2e701598d20110228.csv'\n",
        "# Please uncomment and modify the appropriate line below if you use this option:\n",
        "# file_path = 'YOUR_ABSOLUTE_PATH_TO_THE_CSV_FILE_HERE/afa2e701598d20110228.csv'\n",
        "\n",
        "\n",
        "# Load the dataset\n",
        "try:\n",
        "    df = pd.read_csv(file_path, delimiter=';')\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: The file '{file_path}' was not found.\")\n",
        "    print(\"Please ensure the CSV file is in the correct location or the path is accurate.\")\n",
        "    print(\"Refer to the comments in the code for guidance on file paths.\")\n",
        "    exit() # Exit the script if the file isn't found\n",
        "\n",
        "# --- Data Preprocessing ---\n",
        "# Impute missing numerical values with the median of each column\n",
        "for column in df.columns:\n",
        "    if df[column].dtype == 'float64':\n",
        "        median_val = df[column].median()\n",
        "        df[column].fillna(median_val, inplace=True)\n",
        "\n",
        "# Create the target variable 'Quality' based on O2 levels\n",
        "# Assuming 'Good' quality if O2 is above the median, 'Bad' otherwise\n",
        "df['Quality'] = (df['O2'] > df['O2'].median()).astype(int)\n",
        "\n",
        "# Define features (X) and target (y)\n",
        "# Exclude 'id', 'date', and the original 'O2' from features\n",
        "# 'O2' is excluded because it was used to derive 'Quality' and would create data leakage\n",
        "X = df.drop(columns=['id', 'date', 'O2', 'Quality'])\n",
        "y = df['Quality']\n",
        "\n",
        "# --- Model Training ---\n",
        "# Split the data into training and testing sets (80% train, 20% test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize and train a RandomForestClassifier model\n",
        "# n_estimators: The number of trees in the forest.\n",
        "# random_state: Controls the randomness of the estimator.\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# --- Model Evaluation ---\n",
        "# Make predictions on the test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy score\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Model Accuracy: {accuracy:.2f}\")\n",
        "\n",
        "# Print the classification report, which includes precision, recall, and f1-score\n",
        "report = classification_report(y_test, y_pred)\n",
        "print(\"\\nClassification Report:\\n\", report)\n",
        "\n",
        "# --- Example of Making a Prediction (Optional) ---\n",
        "# To make a prediction on new data, you would create a new DataFrame\n",
        "# with the same columns as X (features) and then use model.predict().\n",
        "# Ensure the new data has been preprocessed in the same way (e.g., missing value imputation).\n",
        "\n",
        "# Example new data (replace with actual new values, ensure column order matches X)\n",
        "# new_sample_data = pd.DataFrame([[0.1, 2.5, 20.0, 10.0, 15.0, 0.08, 300.0, 0.2, 1500.0]],\n",
        "#                               columns=['NH4', 'BSK5', 'Suspended', 'NO3', 'NO2', 'SO4', 'PO4', 'CL'])\n",
        "#\n",
        "# # Ensure the columns match the training data features\n",
        "# # (If you load new data from a file, preprocess it similar to how the training data was.)\n",
        "#\n",
        "# # Check if new_sample_data is defined before trying to predict\n",
        "# # if 'new_sample_data' in locals():\n",
        "# #     new_data_prediction = model.predict(new_sample_data)\n",
        "# #     if new_data_prediction[0] == 1:\n",
        "# #         print(\"\\nPredicted Water Quality for new sample: Good\")\n",
        "# #     else:\n",
        "# #         print(\"\\nPredicted Water Quality for new sample: Bad\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eGpaKaFMYmak",
        "outputId": "c555a140-e2c9-4a45-8be3-60a4b3f84230"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-6-1743576025.py:38: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  df[column].fillna(median_val, inplace=True)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 0.71\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.68      0.76      0.72       284\n",
            "           1       0.74      0.65      0.69       289\n",
            "\n",
            "    accuracy                           0.71       573\n",
            "   macro avg       0.71      0.71      0.71       573\n",
            "weighted avg       0.71      0.71      0.71       573\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "zSGLoxhuadsd"
      }
    }
  ]
}